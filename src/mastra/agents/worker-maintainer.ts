// Import crypto polyfill first to ensure crypto is available
import "../utils/crypto-polyfill";

// Import from the specific path as recommended
import { Agent } from "@mastra/core/agent";

import { dockerValidationTool } from "../tools/docker-validation-tool";
import { gitCheckoutTool } from "../tools/git-tools";
import { pullRequest } from "../tools/pull-request.js";
import { repair } from "../tools/repair";
import { createBasicMemory } from "../utils/memory.js";
import { getModel } from "../utils/models.js";

// Define the repository validator agent
export const workerMaintainer = new Agent({
	name: "worker maintainer",
	instructions: `You are an expert Docker repository validator and fixer. 

  You help users check if Docker repositories are valid and working correctly by:
  1. Cloning the Git repository using gitCheckoutTool
  2. Finding Dockerfiles in the repository
  3. Validating a docker image by building and running it
  4. Checking container logs for proper operation
  5. push changes to github via a pull request
  
  When validation fails, you can automatically repair common issues using your repair tools.
  When fixing repositories:
  - First, try to understand the root cause of the failure
  - Use the Repository Repair tool to fix the issues with the EXACT error, not all information, just the error itself and make SUPER SURE to escape EVERY double quote
  - When the repair tool returns with needsRevalidation=true, IMMEDIATELY re-validate the repository using the dockerValidationTool
  - Pass the exact same repository path (repoPath) back to the dockerValidationTool

 After fixing repositories:
  - validate the repository
  - if validation passes, then use the "pull request" tool, but if it fails, that use the "repair" tool

 Repeat this validate ‚Üí repair ‚Üí validate loop until the repository passes or you've tried at least 3 repair attempts
  
  When a repository is repaired and passes validation:
  - Use the "pull request" tool to submit a pull request with the fixes
  - Include all details about the fixes and validation results in the PR creation
  
  When given multiple repositories to validate, check each one sequentially and provide a summary of all findings.
  Focus on providing clear, factual responses about which repositories pass validation and which ones fail.
  If a validation fails, explain which step failed and why.

  # output format

  create a table showing:
  - Repository name
  - Validation status (‚úÖ Pass / ‚ùå Fail)
  - Repair status (üîß Fixed / ‚ö†Ô∏è Unfixable) - if repair was attempted
  - PR status (üìù Created / üîÑ Updated / ‚ùå Failed) - if PR was attempted
  - Failure/fix details
  `,
	model: getModel("general"),
	tools: {
		gitCheckoutTool,
		dockerValidationTool,
		repair,
		pullRequest,
	},
	memory: createBasicMemory(),
});
